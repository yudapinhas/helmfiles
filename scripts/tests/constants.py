import os

HOSTED_ZONE = "hosted_zone"
CLUSTERS_DATA = {
    "defaults": {
        "ALB_INT": "alb-int-ingress-group-1",
        "ALB_EXT": "alb-ext-ingress-group",
    },
    "playground-eks": {
        HOSTED_ZONE: "internalk-lab.com.",
        "ALB_INT": "alb-play-int-ingress-group",
        "ALB_EXT": "alb-play-ext-ingress-group"
    },
    "staging-eks": {HOSTED_ZONE: "internalk-stg.com."},
    "prd-eks": {HOSTED_ZONE: "internalk.com."},
    "prd-eks-ir": {
        HOSTED_ZONE: "internalk.com.",
        "ALB_EXT": "alb-ireland-ext-ingress-group",
    },
    "pr-e2e-eks": {
        HOSTED_ZONE: "internalk-lab.com.",
        "ALB_INT": "alb-e2e-int-ingress-group",
        "ALB_EXT": "alb-e2e-ext-ingress-group",
    },
    "social-infra-eks": {HOSTED_ZONE: "klocdev.info."},
    "sdlc-data-services-eks": {HOSTED_ZONE: "internalk-stg.com."},
    "prod-data-services-eks": {HOSTED_ZONE: "internalk.com."}
}
NAMESPACES = ["kube-system", "monitoring", "default", "ns-cust-labels"]
EXPECTED_CHARTS = {
    "default": {
        "aws-fsx-openzfs-csi-driver",
        "cluster-autoscaler",
        "coredns-config",
        "external-dns",
        "ingress-external",
        "secrets",
        "ingress-internal",
        "kenshoo-namespace",
        "metrics-server",
        "vault-secrets-webhook",
        "vault-integration",
        "aws-ebs-csi-driver",
        "storage-class",
        "kubernetes-dashboard",
        "priority-class",
        "aws-load-balancer-controller",
        "alb-ingress-groups",
        "external-dns-shared-services"
    },
    "sdlc-data-services-eks": {
        "cluster-autoscaler",
        "coredns-config",
        "external-dns",
        "ingress-external",
        "secrets",
        "ingress-internal",
        "kenshoo-namespace",
        "metrics-server",
        "vault-secrets-webhook",
        "vault-integration",
        "storage-class",
        "priority-class",
        "aws-load-balancer-controller",
        "alb-ingress-groups",
        "external-dns-shared-services"
    },
    "prod-data-services-eks": {
        "cluster-autoscaler",
        "coredns-config",
        "external-dns",
        "ingress-external",
        "secrets",
        "ingress-internal",
        "kenshoo-namespace",
        "metrics-server",
        "vault-secrets-webhook",
        "vault-integration",
        "storage-class",
        "priority-class",
        "aws-load-balancer-controller",
        "alb-ingress-groups",
        "external-dns-shared-services"
    },
    "social-infra-eks": {
        "aws-ebs-csi-driver",
        "aws-efs-csi-driver",
        "alb-ingress-groups",
        "aws-fsx-openzfs-csi-driver",
        "aws-load-balancer-controller",
        "cluster-autoscaler",
        "coredns-config",
        "external-dns",
        "ingress-external",
        "secrets",
        "ingress-internal",
        "kenshoo-namespace",
        "metrics-server",
        "vault-secrets-webhook",
        "vault-integration",
        "storage-class",
        "priority-class",
        "external-dns-shared-services",
        "service-accounts"
    },
    "pr-e2e-eks": {
        "aws-fsx-openzfs-csi-driver",
        "cluster-autoscaler",
        "coredns-config",
        "external-dns",
        "ingress-external",
        "secrets",
        "ingress-internal",
        "kenshoo-namespace",
        "metrics-server",
        "vault-secrets-webhook-arm-support",
        "vault-integration",
        "aws-ebs-csi-driver",
        "storage-class",
        "kubernetes-dashboard",
        "priority-class",
        "aws-load-balancer-controller",
        "alb-ingress-groups",
        "external-dns-shared-services"
    },
    "staging-eks": {
        "aws-fsx-openzfs-csi-driver",
        "cluster-autoscaler",
        "coredns-config",
        "external-dns",
        "ingress-external",
        "secrets",
        "ingress-internal",
        "kenshoo-namespace",
        "metrics-server",
        "vault-secrets-webhook-arm-support",
        "vault-integration",
        "aws-ebs-csi-driver",
        "storage-class",
        "kubernetes-dashboard",
        "priority-class",
        "aws-load-balancer-controller",
        "alb-ingress-groups",
        "external-dns-shared-services"
    },
    "prd-eks": {
        "aws-fsx-openzfs-csi-driver",
        "cluster-autoscaler",
        "coredns-config",
        "external-dns",
        "ingress-external",
        "secrets",
        "ingress-internal",
        "kenshoo-namespace",
        "metrics-server",
        "vault-secrets-webhook-arm-support",
        "vault-integration",
        "aws-ebs-csi-driver",
        "storage-class",
        "kubernetes-dashboard",
        "priority-class",
        "aws-load-balancer-controller",
        "alb-ingress-groups",
        "external-dns-shared-services"
    },
    "prd-eks-ir": {
        "aws-fsx-openzfs-csi-driver",
        "cluster-autoscaler",
        "coredns-config",
        "external-dns",
        "ingress-external",
        "secrets",
        "ingress-internal",
        "kenshoo-namespace",
        "metrics-server",
        "vault-secrets-webhook-arm-support",
        "vault-integration",
        "aws-ebs-csi-driver",
        "storage-class",
        "kubernetes-dashboard",
        "priority-class",
        "aws-load-balancer-controller",
        "alb-ingress-groups",
        "external-dns-shared-services"
    },
    "playground-eks": {
        "aws-fsx-openzfs-csi-driver",
        "cluster-autoscaler",
        "coredns-config",
        "external-dns",
        "ingress-external",
        "secrets",
        "ingress-internal",
        "kenshoo-namespace",
        "metrics-server",
        "vault-secrets-webhook-arm-support",
        "vault-integration",
        "aws-ebs-csi-driver",
        "storage-class",
        "kubernetes-dashboard",
        "priority-class",
        "aws-load-balancer-controller",
        "alb-ingress-groups",
        "external-dns-shared-services"
    },
}
STORAGE_CLASSES = ["storage.class.gp2.us.east.1a", "storage.class.gp2.us.east.1b", "storage.class.gp2.eu.west.1a"]
try:
    CLUSTER_NAME = os.environ["CLUSTER"]
    CURRENT_CLUSTER_DATA = CLUSTERS_DATA[CLUSTER_NAME]
except:
    raise Exception("Please define a valid cluster name")
