---
apiVersion: v1
kind: ConfigMap
metadata:
  name: jenkins-dsl-scripts
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
data:
  seedJob.groovy: |
{{ .Files.Get "jenkins-dsl/seedJob.groovy" | indent 4 }}
  repos.groovy: |-
{{ .Files.Get "jenkins-dsl/repos.groovy" | indent 4 }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: disable-setup-configmap
  namespace: {{ .Release.Namespace }}
data:
  disable-setup.groovy: |
    import jenkins.model.*
    Jenkins.instance.setInstallState(InstallState.INITIAL_SETUP_COMPLETED)
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: manage-jenkins-configmap
  namespace: {{ .Release.Namespace }}
data:
  00-manage-jenkins-configs.groovy: |-
    import jenkins.model.*
    import jenkins.model.JenkinsLocationConfiguration
    import com.cloudbees.plugins.credentials.*
    import com.cloudbees.plugins.credentials.domains.*
    import org.jenkinsci.plugins.plaincredentials.impl.StringCredentialsImpl
    import hudson.util.Secret
    import org.jenkinsci.plugins.github.GitHubPlugin
    import org.jenkinsci.plugins.github.config.GitHubPluginConfig
    import org.jenkinsci.plugins.github.config.GitHubServerConfig
    import groovy.json.JsonSlurper

    println "‚è≥ Waiting 60s for ngrok to start‚Ä¶"
    sleep 60000

    // ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
    // 1) Determine and set Jenkins URL
    // ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
    def loc = JenkinsLocationConfiguration.get()
    def jenkinsUrl = loc.getUrl()
    if (!jenkinsUrl) {
      // poll ngrok
      jenkinsUrl = (1..30).findResult {
        try {
          def data = new JsonSlurper().parseText(new URL("http://127.0.0.1:4040/api/tunnels").text)
          data.tunnels.find { it.proto=='https' }?.public_url
        } catch(_) {
          sleep 2000; null
        }
      }
      if (jenkinsUrl) {
        loc.setUrl(jenkinsUrl)
        loc.save()
      } else {
        println "‚ö†Ô∏è  ngrok URL not found; please configure Jenkins URL by hand"
      }
    }

    // ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
    // 2) Inject GitHub PAT
    // ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
    def pat = System.getenv("GITHUB_PAT")
    if (pat) {
      def creds = new StringCredentialsImpl(
        CredentialsScope.GLOBAL,
        "github-pat",
        "GitHub PAT for GHPRB",
        Secret.fromString(pat)
      )
      SystemCredentialsProvider.getInstance()
        .getStore()
        .addCredentials(Domain.global(), creds)
      println "‚úÖ Injected github-pat credential"
    } else {
      println "‚ö†Ô∏è  GITHUB_PAT not set; skipping credential injection"
    }
    // ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
    // 3) Configure GitHub plugin + webhook URL
    // ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
    def cfg = GitHubPlugin.configuration() as GitHubPluginConfig
    cfg.getConfigs().clear()

    def server = new GitHubServerConfig("github-pat")
    server.setName("GitHub")
    server.setApiUrl("https://api.github.com")
    server.setManageHooks(false)
    cfg.getConfigs().add(server)

    if (jenkinsUrl) {
      cfg.setHookUrl("${jenkinsUrl}/github-webhook/")
      println "‚úÖ GitHub plugin hook URL ‚Üí ${jenkinsUrl}/github-webhook/"
    }

    cfg.save()
    println "‚úÖ Jenkins GitHub plugin fully configured"

    // 4) Trigger ghprbTrigger.start() on all WorkflowJobs
    import org.jenkinsci.plugins.ghprb.GhprbTrigger

    println "üîÅ Triggering ghprbTrigger.start() on all WorkflowJobs‚Ä¶"

    Jenkins.instance.getAllItems(org.jenkinsci.plugins.workflow.job.WorkflowJob).each { job ->
        def trigger = job.getTriggers()?.get(GhprbTrigger)
        if (trigger != null) {
            println "‚û°Ô∏è Starting ghprbTrigger for job: ${job.fullName}"
            trigger.stop() // Stop existing trigger to reset
            trigger.start(job, true) // Restart with new configuration
        }
    }

    println "‚úÖ ghprbTrigger initialization complete."
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: jenkins-plugin-list
  namespace: {{ .Release.Namespace }}
data:
  plugins.txt: |
    configuration-as-code:latest
    workflow-job:latest
    workflow-aggregator:latest
    job-dsl:latest
    git:latest
    github:latest
    
    blueocean
    ssh-credentials:latest
    plain-credentials:latest
    ansicolor:latest
    timestamper:latest
    ws-cleanup
    email-ext:latest
    ghprb:latest
