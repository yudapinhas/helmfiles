apiVersion: v1
kind: ConfigMap
metadata:
  name: jenkins-casc-config
  namespace: jenkins
  labels:
    {{- include "jenkins.labels" . | nindent 4 }}
data:
  jenkins.yaml: |
    jenkins:
      systemMessage: "Configured by JCasC"
      numExecutors: 2
      clouds: []
      crumbIssuer:
        default:
          excludeClientIPFromCrumb: true
    credentials:
      system:
        domainCredentials:
          - domain:
              name: "" 
              description: "Global credentials"
            credentials:
              - basicSSHUserPrivateKey:
                  scope: GLOBAL
                  id: "github-ssh-key"
                  username: "git"
                  description: "SSH key for GitHub access"
                  privateKeySource:
                    directEntry:
                      privateKey: |
                        {{ .Values.controller.ssh.privateKey | nindent 24 }}
    jobs:
      - script: >
          pipelineJob('seed-ci-cd-pipelines') {
            description('Generates pull-request and release jobs')
            definition {
              cps {
                script("""
                  pipeline {
                      agent any

                      stages {
                          stage('Clone Private Creds') {
                            steps {
                                withCredentials([sshUserPrivateKey(
                                    credentialsId: 'github-ssh-key',
                                    keyFileVariable: 'SSH_KEY'
                                )]) {
                                    script {
                                        def status = sh(
                                            script: '''
                                              set -e
                                              GIT_SSH_COMMAND="ssh -i \$SSH_KEY -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" \
                                              git clone git@github.com:yudapinhas/netgod-private.git "$JENKINS_HOME/workspace/netgod-private"
                                            ''',
                                            returnStatus: true
                                        )
                                        echo status == 0
                                            ? '‚úÖ  netgod-private cloned successfully'
                                            : '‚ö†Ô∏è  netgod-private repo not reachable ‚Äî continuing without it'
                                      }
                                  }
                              }
                          }

                          stage('Prepare DSL Scripts') {
                              steps {
                                  println 'Copying DSL scripts from mounted directory...'
                                  sh 'mkdir -p dsl && cp /var/jenkins_home/dsl/*.groovy dsl/'
                              }
                          }

                          stage('Run Job DSL') {
                            steps {
                                println '************************************************************'
                                println '‚öôÔ∏è  Starting CI/CD Pipeline Job Generation'


                                jobDsl targets: 'dsl/*.groovy',
                                      removedJobAction: 'IGNORE',
                                      ignoreExisting: false,
                                      lookupStrategy: 'JENKINS_ROOT',
                                      additionalClasspath: '',
                                      sandbox: false

                                println '‚úÖ  Job Generation Completed! Check the logs above for created/updated jobs.'
                                println '************************************************************'
                              }
                          }
                      
                          stage('Exposed Jenkins URL for Github Webhooks') {
                              steps {
                                  println 'Fetching Public Jenkins URL...'
                                  sh '''
                                    curl -s http://localhost:4040/api/tunnels | grep -o '"public_url":"[^"]*"' | sed 's/"public_url":"//;s/"//' > /var/jenkins_home/tunnel-url.txt
                                    echo "************************************************************"
                                    echo "üåê Jenkins URL for Webhooks: \$(cat /var/jenkins_home/tunnel-url.txt)"
                                  '''
                                  println '************************************************************'

                              }
                          }
                      }

                      post {
                          always {
                              echo 'Seed job finished.'
                          }
                      }
                  }
                """)
                sandbox(true)
              }
            }
          }
    unclassified:
      globalLibraries:
        libraries:
          - name: "netgod-jenkins-shared-lib"
            defaultVersion: "master"
            implicit: true
            allowVersionOverride: true
            includeInChangesets: false
            retriever:
              modernSCM:
                scm:
                  git:
                    remote: "git@github.com:yudapinhas/jenkins-shared-lib.git"
                    credentialsId: "github-ssh-key"
