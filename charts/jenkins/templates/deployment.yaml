### charts/jenkins/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jenkins
  labels:
    {{- include "jenkins.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "jenkins.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app: jenkins
        {{- include "jenkins.selectorLabels" . | nindent 8 }}
    spec:
      serviceAccountName: {{ .Values.serviceAccount.name }}
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      initContainers:
        - name: install-plugins
          image: jenkins/jenkins:lts
          command:
            - bash
            - -c
            - |
              set -eux
              mkdir -p /var/jenkins_home/plugins
              jenkins-plugin-cli \
                --plugin-file /plugins/plugins.txt \
                --plugin-download-directory /var/jenkins_home/plugins \
                --verbose
          volumeMounts:
            - name: plugin-list
              mountPath: /plugins
            - name: jenkins-home
              mountPath: /var/jenkins_home

        - name: install-pretools
          image: ubuntu:latest
          securityContext:
            runAsUser: 0
          command:
            - bash
            - -c
            - |
              set -eux
              mkdir -p /var/jenkins_home/tools/bin
              chown -R 1000:1000 /var/jenkins_home
              cat > /var/jenkins_home/.bashrc << 'EOF'
              export PATH=/var/jenkins_home/tools/bin:$PATH
              EOF
              cat > /var/jenkins_home/.bash_profile << 'EOF'
              if [ -f ~/.bashrc ]; then
                  . ~/.bashrc
              fi
              export PATH=/var/jenkins_home/tools/bin:$PATH
              EOF
              chown 1000:1000 /var/jenkins_home/.bashrc /var/jenkins_home/.bash_profile
              chmod 644 /var/jenkins_home/.bashrc /var/jenkins_home/.bash_profile

              apt-get update && apt-get install -y curl unzip
              for script in /netgod-pretools/*.sh; do
                bash "$script" || exit 1
              done
          volumeMounts:
            - name: netgod-pretools
              mountPath: /netgod-pretools
            - name: jenkins-home
              mountPath: /var/jenkins_home

      containers:
        - name: jenkins
          image: jenkins/jenkins:lts
          ports:
            - containerPort: 8080
          env:
            - name: JENKINS_ENABLE_FORWARD_HEADERS
              value: "true"
            - name: JENKINS_ADMIN_ID
              value: admin
            - name: JENKINS_ADMIN_PASSWORD
              value: admin
            - name: JAVA_OPTS
              value: "-Djenkins.install.runSetupWizard=false"
            - name: CASC_JENKINS_CONFIG
              value: "/var/jenkins_home/casc_configs"
            - name: GITHUB_PAT
              value: {{ index .Values.controller.env 0 "value" | quote }}
            - name: TF_TOKEN_app_terraform_io
              valueFrom:
                secretKeyRef:
                  name: terraform-cloud-token
                  key: text
          volumeMounts:
            - name: jenkins-home
              mountPath: /var/jenkins_home
            - name: dsl-scripts
              mountPath: /var/jenkins_home/dsl
              readOnly: true
            - name: casc-config
              mountPath: /var/jenkins_home/casc_configs
              readOnly: true
            - name: known-hosts
              mountPath: /var/jenkins_home/.ssh/known_hosts
              subPath: known_hosts
              readOnly: true
            - name: netgod-pretools
              mountPath: /var/jenkins_home/netgod-pretools
              readOnly: true
            - name: manage-jenkins-configs-init
              subPath: 00-manage-jenkins-configs.groovy
              mountPath: /var/jenkins_home/init.groovy.d/00-manage-jenkins-configs.groovy
              readOnly: true

        - name: ngrok
          image: ngrok/ngrok:latest
          env:
            - name: NGROK_AUTHTOKEN
              valueFrom:
                secretKeyRef:
                  name: ngrok-secret
                  key: authtoken
          command:
            - sh
            - -c
            - |
              ngrok config add-authtoken "${NGROK_AUTHTOKEN}"
              ngrok http 8080 --log=stdout --host-header=rewrite
          ports:
            - containerPort: 4040

      volumes:
        - name: jenkins-home
          emptyDir: {}
        - name: plugin-list
          configMap:
            name: jenkins-plugin-list
        - name: dsl-scripts
          configMap:
            name: jenkins-dsl-scripts
        - name: casc-config
          configMap:
            name: jenkins-casc-config
        - name: known-hosts
          configMap:
            name: github-known-hosts
        - name: netgod-pretools
          configMap:
            name: netgod-pretools-installer
            defaultMode: 0755
        - name: manage-jenkins-configs-init
          configMap:
            name: manage-jenkins-configmap
            defaultMode: 0755
